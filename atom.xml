<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[yisbug's blog]]></title>
  <subtitle><![CDATA[blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yisbug.github.io/"/>
  <updated>2015-03-18T19:02:10.000Z</updated>
  <id>http://yisbug.github.io/</id>
  
  <author>
    <name><![CDATA[Y]]></name>
    <email><![CDATA[yisbug@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mongodb&&mongoose[进行中]]]></title>
    <link href="http://yisbug.github.io/2015/03/19/mongoose/"/>
    <id>http://yisbug.github.io/2015/03/19/mongoose/</id>
    <published>2015-03-18T18:39:42.000Z</published>
    <updated>2015-03-18T19:02:10.000Z</updated>
    <content type="html"><![CDATA[<p>最近做的几个项目都用到了<code>mongodb</code>和<code>mongoose</code>，以前整理过一份常用<code>api</code>，重温一次再做补充。<br><a id="more"></a></p>
<h3 id="shell">shell</h3><ul>
<li>show dbs,show databases</li>
<li>show collections,show tables</li>
<li>show users</li>
<li>show profile</li>
<li>use \<dbname\></dbname\></li>
<li>db.help()</li>
<li>db.auth</li>
<li>db.addUser</li>
</ul>
<h3 id="数据类型">数据类型</h3><ul>
<li>null</li>
<li>boolean</li>
<li>64位浮点数(js),32位整数,64位整数,64位浮点数</li>
<li>string</li>
<li>date  </li>
<li>ObjectId</li>
<li>regexp</li>
<li>code  javascript代码</li>
<li>buffer</li>
<li>undefined</li>
<li>array</li>
<li>document</li>
<li>max/min</li>
</ul>
<p>ObjectId() 12字节存储，每个字节两位16进制数字。<br>0-3字节位时间戳，4-6字节主机唯一标示，7-8位pid标识不同进程，9-11位计数器。<br>所以同一秒同一进程最多可产生256^3（16777216）个不同的ObjectId。</p>
<p>mongodb中不存储时区，从标准纪元开始的ms数。shell显示时会读取本地的时区设置做对应转换。</p>
<h3 id="基本操作接口">基本操作接口</h3><p>curd</p>
<h4 id="create">create</h4><p>post = {}<br>db.blog.insert(post);</p>
<h4 id="update">update</h4><p>post = {content:’test’}<br>db.blog.update({title:”post”},post);</p>
<h4 id="find">find</h4><p>db.blog.find({title:”post”})</p>
<h4 id="remove">remove</h4><p>db.blog.remove({title:”post”});</p>
<h3 id="插入">插入</h3><p>db.foo.insert({“bar”:”baz”});</p>
<p>对同一集合插入时，尽量使用批量插入，但是批量插入消息长度最大为16MB。<br>单个文档（转换为BSON）不能大于4MB。shell中使用 Object.bsonsize(doc)查看大小。</p>
<h3 id="删除文档">删除文档</h3><p>db.users.remove([optional doc]) 删除users集合中所有文档，但不会删除集合本身，原有的索引也会保留。</p>
<p>remove函数接受一个查询文档作为可选参数。删除数据时永久性的，不能撤销也不能恢复。<br>db.users.list.remove({“opt-out”:true})</p>
<h3 id="更新文档">更新文档</h3><p>更新操作是原子的。如果两个更新同时发生，先到达服务器的先执行，最后到达服务器的最后执行。</p>
<p>两个参数，一个是查询文档，一个时修改器（modifier）文档<br>db.users.update(finddoc,modifier)</p>
<h3 id="修改器">修改器</h3><h4 id="$inc">$inc</h4><p>增加，键不存在时自动创建。只能用于数字类型的键<br>增加 db.users.update(_id,{“$inc”:{score:50}}) 增加50分</p>
<h4 id="$set">$set</h4><p>指定一个键的值，如果这个键不存在则创建它<br>可以修改数据类型，也可以修改内嵌文档</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;_id:ObjectId(<span class="string">'asdasdasd'</span>)&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"address"</span>:<span class="string">"test"</span>&#125;&#125;)</span><br><span class="line">db.users.update(_id,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"author.name"</span>:<span class="string">"joe"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="$unsert">$unsert</h4><p>删除键<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(_id,&#123;<span class="string">"$unsert"</span>:&#123;<span class="string">"address"</span>:<span class="number">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="$push">$push</h4><p>数组修改器，向数组末尾加入一个元素，如果键不存在则创建一个数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(_id,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"address"</span>:&#123;<span class="string">"city"</span>:<span class="string">"taiyuan"</span>,<span class="string">"street"</span>:<span class="string">"as"</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="$ne_使用在查询文档">$ne 使用在查询文档</h4><p>如果一个值不在数组中就把它加进去<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.papers.update(&#123;<span class="string">"autjprs cited"</span>:&#123;<span class="string">"$ne"</span>:<span class="string">"Richie"</span>&#125;&#125;,&#123;<span class="string">"$push"</span>:&#123;<span class="string">"authors cited"</span>:<span class="string">"Richie"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="$addToSet">$addToSet</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(_id,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"emails"</span>:<span class="string">"test@t.com"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="$each">$each</h4><p>一次添加多个邮件地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(_id,&#123;<span class="string">"$addToSet"</span>:&#123;<span class="string">"emails"</span>:&#123;<span class="string">"$each"</span>:[<span class="string">"a@a.com"</span>,<span class="string">'a@b.com'</span>,<span class="string">'a@c.com'</span>]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="$pop">$pop</h4><p>移除一个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.lists.update(_id,&#123;<span class="string">"pop"</span>:&#123;<span class="string">"emails"</span>:<span class="number">1</span>&#125;)  <span class="comment">//从末尾移除</span></span><br><span class="line">db.lists.update(_id,&#123;<span class="string">"pop"</span>:&#123;<span class="string">"emails"</span>:-<span class="number">1</span>&#125;)  <span class="comment">//从头部移除</span></span><br></pre></td></tr></table></figure></p>
<h4 id="$pull">$pull</h4><p>移除匹配条件的数组元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lists.update(_id,&#123;<span class="string">"$pull"</span>:&#123;<span class="string">"email"</span>:<span class="string">"a@a.com"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="数组定位操作符$">数组定位操作符$</h4><p>通过位置活着定位操作符$<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"comments.0.votes"</span>:<span class="number">1</span>&#125;&#125; <span class="comment">//第一条评论的投票数＋1</span></span><br><span class="line">db.blog.update(&#123;<span class="string">"comments.author"</span>:<span class="string">"john"</span>,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"comments.$.author"</span>:<span class="string">"jim"</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>定位符只更新第一个匹配的元素。</p>
<h4 id="upsert">upsert</h4><p>如果没有找到符合条件的文档，则insert一个新的文档。如果找到，则更新该文档。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.analytics.update(&#123;<span class="string">"url"</span>:<span class="string">"/blog"</span>&#125;,&#123;<span class="string">"$inc"</span>:&#123;<span class="string">"visits"</span>:<span class="number">1</span>&#125;&#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p>
<p>第三个参数true表示该次update为upsert</p>
<h4 id="save">save</h4><p>文档存在时插入，存在时更新。<br>如果文档包括”_id”键，则会调用upsert，否则调用插入</p>
<h4 id="更新多个文档，使用update的第四个参数">更新多个文档，使用update的第四个参数</h4><p>第4个参数true则更新所有文档，为false则只更新第一个符合条件的文档。默认为false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;birthday:<span class="string">"2014-01-01"</span>,&#123;$set:&#123;gift:<span class="string">"Happy birthday!"</span>&#125;&#125;&#125;,<span class="literal">false</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="db-runCommand({getLastError:1})">db.runCommand({getLastError:1})</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"err"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="string">"updatedExisting"</span>:<span class="literal">true</span>,<span class="comment">//表明对已有的文档进行更新</span></span><br><span class="line">    <span class="string">"n"</span>:<span class="number">5</span>,<span class="comment">//说明有5个文档被更新了</span></span><br><span class="line">    <span class="string">"ok"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="findAndModify_命令">findAndModify 命令</h4><p>每个键对应如下：</p>
<ul>
<li>findAndModify 字符串，集合名</li>
<li>query 查询文档，用来检索文档的条件</li>
<li>sort 排序结果的条件</li>
<li>update 修改器文档</li>
<li>remove boolean，表示是否删除文档</li>
<li>new 表示返回的事更新前的文档还是更新后的。默认是更新前的文档</li>
<li>update和remove只能有一个，必须有一个<br>只能处理一个文档，不能直行upsert操作，只能更新已有文档。</li>
</ul>
<h4 id="插入、删除和更新都是瞬间完成的">插入、删除和更新都是瞬间完成的</h4><h3 id="查询">查询</h3><h4 id="find(条件文档,指定返回的键)">find(条件文档,指定返回的键)</h4><p>findOne的参数和find一致</p>
<h4 id="指定返回的键">指定返回的键</h4><p>{“username”:1,”email”:1,”address”:0} 表示返回username,email,_id,不返回address</p>
<h4 id="条件文档">条件文档</h4><ul>
<li>$lt  &lt;</li>
<li>$lte &lt;=</li>
<li>$gt &gt;</li>
<li>$gte &gt;=</li>
<li>$ne &lt;&gt; </li>
<li>$or or</li>
<li>$in in</li>
<li>$nin not in</li>
<li>$mod [a,b] 将查询的值除a，若余数等于b则返回该结果</li>
<li>$not 元条件句，可用于任何其他条件之上。</li>
<li>$exists 键是否存在 db.users.find({“address”:{“$exists”:true}})</li>
<li>正则表达式 db.users.find({“name”:/joe/i})</li>
</ul>
<p>mongodb使用perl兼容的正则表达式（PCRE）库来匹配正则表达式<br>mongodb可以为前缀型正则表达式（比如/^joe/）查询创建索引，所以这类型的查询会非常高效。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2014-01-01"</span>)</span><br><span class="line">db.users.find(&#123;<span class="string">"registered"</span>:&#123;<span class="string">"$lt"</span>:start&#125;&#125;)</span><br><span class="line">db.users.find(&#123;<span class="string">"user_id"</span>:&#123;<span class="string">"$in"</span>:[<span class="string">'1234'</span>,<span class="string">'joe'</span>]&#125;&#125;)</span><br><span class="line"><span class="comment">//查找user_id为joe或年龄为20</span></span><br><span class="line">db.users.find(&#123;<span class="string">"$or"</span>:[&#123;<span class="string">"user_id"</span>:<span class="string">"joe"</span>&#125;,&#123;<span class="string">"age"</span>:<span class="number">20</span>&#125;]) </span><br><span class="line"><span class="comment">//返回id_num为1，6，11，16等的用户</span></span><br><span class="line">db.users.find(&#123;<span class="string">"id_num"</span>:&#123;<span class="string">"$mod"</span>:[<span class="number">5</span>,<span class="number">1</span>]&#125;&#125;) </span><br><span class="line"><span class="comment">//返回id_num不为1,6,11,16等的用户</span></span><br><span class="line">db.users.find(&#123;<span class="string">"id_num"</span>:&#123;<span class="string">"not"</span>:&#123;<span class="string">"$mod"</span>:[<span class="number">5</span>,<span class="number">1</span>]&#125;&#125;&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//条件句是内层文档的键，修改器是外层文档的键，可对一个键应用多个条件</span></span><br><span class="line">db.users.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">30</span>,<span class="string">"$gt"</span>:<span class="number">20</span>&#125;&#125;) 查找年龄小于<span class="number">30</span>大于<span class="number">20</span></span><br></pre></td></tr></table></figure>
<h5 id="查询数组">查询数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.food.insert(&#123;<span class="string">"fruit"</span>:[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]&#125;)</span><br><span class="line">db.food.find(&#123;<span class="string">"fruit"</span>:<span class="string">"a"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>可以将数组类型的键理解为：数组的每个元素都是整个键的值</p>
<p>$all 多个元素来匹配数组，查找包含$all参数的数组</p>
<p>也可以直接使用数组来精确匹配，精确匹配时会检查数组顺序</p>
<p>使用key.index语法指定下标来查询指定位置的元素</p>
<p>$size 查询长度，$size不能和其他查询子句组合</p>
<p>$slice 指定要返回的长度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.blog.posts.find(&#123;&#125;,&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">10</span>&#125;&#125;) <span class="comment">//返回前10</span></span><br><span class="line">db.blog.posts.find(&#123;&#125;,&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$slice"</span>:-<span class="number">10</span>&#125;&#125;) <span class="comment">//返回后10</span></span><br><span class="line"><span class="comment">//返回后第24-33个元素，如果不够10个则返回23个元素后面的所有元素</span></span><br><span class="line">db.blog.posts.find(&#123;&#125;,&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$slice"</span>:[<span class="number">23</span>,<span class="number">10</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>第二个参数用了$slice后，将返回文档所有的键，除非特别声明不返回</p>
<h5 id="查询内嵌文档">查询内嵌文档</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.people.find(&#123;<span class="string">"name.first"</span>:<span class="string">"joe"</span>,<span class="string">"name.last"</span>:<span class="string">"Schmoe"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>$elemMatch 将限定条件进行分组，仅当需要对一个内嵌文档的多个键操作时才会用到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.blog.find(&#123;<span class="string">"comments"</span>:&#123;<span class="string">"$elemMatch"</span>:&#123;<span class="string">"author"</span>:<span class="string">"joe"</span>,<span class="string">"score"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">5</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>在博客中查找作者为joe并且评分大于5的评论</p>
<p>下面一个查询时错误的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.blog.find(&#123;<span class="string">"comments.author"</span>:<span class="string">"joe"</span>,<span class="string">"comments.score"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">5</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这会直接返回这条blog</p>
<h4 id="$where">$where</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.foo.find(&#123;<span class="string">"$where"</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> current <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> other <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (current != other &amp;&amp; <span class="keyword">this</span>[current]== <span class="keyword">this</span>[other])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>如果函数返回true，则返回该文档。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.foo.find(&#123;<span class="string">"$where"</span>:<span class="string">"this.x + this.y==10"</span>&#125;)</span><br><span class="line">db.foo.find(&#123;<span class="string">"$where"</span>:<span class="string">"function()&#123;return this.x+this.y==10;&#125;"</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>尽可能用索引作为前置过滤，然后使用$where对结果进行调优</p>
<h4 id="游标">游标</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cursor = db.collection.find()</span><br><span class="line"><span class="keyword">while</span>(cursor.hasNext())&#123;</span><br><span class="line">    obj = cursor.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="hasNext()_检测有没有其他结果">hasNext() 检测有没有其他结果</h4><h4 id="next()_返回一条结果">next() 返回一条结果</h4><h4 id="forEach()_迭代游标中的结果">forEach() 迭代游标中的结果</h4><p>find方法总是会返回游标本身，只有要求获得结果时才发送查询，所以可以给游标附加额外的选项</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.foo.find().sort(&#123;<span class="string">"x"</span>:<span class="number">1</span>&#125;).limit(<span class="number">1</span>).skip(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>limit  指定返回结果的上限<br>skip 指定忽略结果的数量的上限<br>sort 排序，键值对，键对应文档的键名，值代表排序的方向，1为升序，－1为降序，可指定多个键值对。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.c.find().sort(&#123;username:<span class="number">1</span>,age:-<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="对混合类型的键排序">对混合类型的键排序</h4><p>如果一个键例如user_id为混合类型的，包括数字、字符串等，则按照以下顺序排序从小到大：<br>1.最小值<br>2.null<br>3.数字<br>4.字符串<br>5.对象/文档<br>6.数组<br>7.二进制数据<br>8.对象ID<br>9.布尔<br>10.日期<br>11.时间戳<br>12.正则表达式<br>13.最大值</p>
<h4 id="分页">分页</h4><p>避免使用skip略过大量结果<br>可使用上一次查询的结果作为查询条件来获取下一页</p>
<h4 id="随机选取文档">随机选取文档</h4><p>可以给文档增加一个额外的随机键”random”:Math.random()<br>然后根据random来查找</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">random = <span class="built_in">Math</span>.random()</span><br><span class="line">result = db.foo.findOne(&#123;<span class="string">"random"</span>:&#123;<span class="string">"$gt"</span>:random&#125;&#125;)</span><br><span class="line"><span class="keyword">if</span>(result == <span class="literal">null</span>)&#123;</span><br><span class="line">    result = db.foo.findOne(&#123;<span class="string">"random"</span>:&#123;<span class="string">"$lt"</span>:random&#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="索引">索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.people.ensureIndex(&#123;<span class="string">"username"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近做的几个项目都用到了<code>mongodb</code>和<code>mongoose</code>，以前整理过一份常用<code>api</code>，重温一次再做补充。<br>]]>
    
    </summary>
    
      <category term="mongodb" scheme="http://yisbug.github.io/tags/mongodb/"/>
    
      <category term="mongoose" scheme="http://yisbug.github.io/tags/mongoose/"/>
    
      <category term="nodejs" scheme="http://yisbug.github.io/tags/nodejs/"/>
    
      <category term="整理归纳" scheme="http://yisbug.github.io/categories/%E6%95%B4%E7%90%86%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mocha]]></title>
    <link href="http://yisbug.github.io/2015/03/19/mocha/"/>
    <id>http://yisbug.github.io/2015/03/19/mocha/</id>
    <published>2015-03-18T17:12:33.000Z</published>
    <updated>2015-03-18T18:19:12.000Z</updated>
    <content type="html"><![CDATA[<p>Mocha是一个拥有丰富功能的javascript测试框架，可以用于nodejs和浏览器。支持同步/异步测试用例，有多种报告形式。<br><a id="more"></a></p>
<h3 id="Installation">Installation</h3><pre><code>npm <span class="keyword">install</span> -g mocha
</code></pre><h3 id="Assertions">Assertions</h3><ul>
<li><code>should.js</code> BDD style shown throughout these docs.</li>
<li><code>chai</code> expect() assert() and should style assertions</li>
<li><code>expect.js</code> expect() style assertions</li>
<li><code>better-assert</code> c-style self.documenting assert()</li>
</ul>
<p>我一般使用nodejs自带的<code>assert</code>模块和<code>should.js</code>。</p>
<h3 id="Synchronous_code">Synchronous code</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'Array'</span>,<span class="function">-&gt;</span></span><br><span class="line">    describe <span class="string">'#indexOf()'</span>,<span class="function">-&gt;</span></span><br><span class="line">        it <span class="string">'should return -1 when the value is not present.'</span>,<span class="function">-&gt;</span></span><br><span class="line">            [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">5</span>).should.equal -<span class="number">1</span></span><br><span class="line">            [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">0</span>).should.equal -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="Asynchronous_code">Asynchronous code</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'User'</span>,<span class="function">-&gt;</span></span><br><span class="line">    describe <span class="string">'#save()'</span>,<span class="function">-&gt;</span></span><br><span class="line">        it <span class="string">'should save without error'</span>,<span class="function"><span class="params">(done)</span>-&gt;</span></span><br><span class="line">            user = <span class="keyword">new</span> User <span class="string">'Luna'</span></span><br><span class="line">            user.save (err)-&gt;</span><br><span class="line">                assert.ifError err</span><br><span class="line">                done()</span><br></pre></td></tr></table></figure>
<p>可以看到同步/异步的区别只是增加一个<code>done</code>函数作为参数。异步过程结束后调用<code>done()</code>即可。</p>
<p><code>done()</code>函数也可以接受一个error作为参数。</p>
<h3 id="hooks">hooks</h3><p>具体用法看名字就知道了。</p>
<ul>
<li><code>before()</code> </li>
<li><code>after()</code></li>
<li><code>beforeEach()</code></li>
<li><code>afterEach()</code></li>
</ul>
<p>All ‘hooks’ 同样可以接受<code>done</code>参数用于同步/异步过程。</p>
<p>甚至可以不使用done回调，而是直接返回一个promise对象。例如：</p>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it <span class="string">'test'</span>,<span class="function">-&gt;</span></span><br><span class="line">    db.clear().<span class="keyword">then</span> -&gt;</span><br><span class="line">        <span class="keyword">return</span> db.save [tobi,loki,jane]</span><br></pre></td></tr></table></figure>
<p>不过一般还是习惯加上done参数，整个流程看起来更清晰。</p>
<p>也可以什么都不做，只加入一段说明或者等待以后补充处理过程。</p>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'Array'</span>,<span class="function">-&gt;</span></span><br><span class="line">    descibe <span class="string">'#indexOf'</span>,<span class="function">-&gt;</span></span><br><span class="line">        it <span class="string">'should return -1 when the value is not present.'</span></span><br></pre></td></tr></table></figure>
<h3 id="Exclusive_tests">Exclusive tests</h3><p>通过使用<code>only()</code>只执行指定的测试场景。</p>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'Array'</span>,<span class="function">-&gt;</span></span><br><span class="line">    describe.only <span class="string">'#indexOf()'</span>,<span class="function">-&gt;</span></span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'Array'</span>,<span class="function">-&gt;</span></span><br><span class="line">    describe <span class="string">'#indexOf()'</span>,<span class="function">-&gt;</span></span><br><span class="line">        it.only <span class="string">'should return -1 unless present.'</span>,<span class="function">-&gt;</span></span><br><span class="line"></span><br><span class="line">        it <span class="string">'should return the index when present.'</span>,<span class="function">-&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Inclusive_tests">Inclusive tests</h3><p>类似<code>only()</code>，可以用<code>skip()</code>跳过某些测试。<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'Array'</span>,<span class="function">-&gt;</span></span><br><span class="line">    describe.skip <span class="string">'#indexOf'</span>,<span class="function">-&gt;</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    describe <span class="string">'#ooo'</span>,<span class="function">-&gt;</span></span><br><span class="line">        it.skip <span class="string">'shoud...'</span>,<span class="function">-&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="基本用法和命令参数">基本用法和命令参数</h3><pre><code><span class="tag">mocha</span> <span class="attr_selector">[debug]</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[files]</span>
</code></pre><p>直接执行<code>mocha</code>命令，默认会查找<code>./test/*.js</code>，so，尽量把所有测试用例放到<code>test</code>目录。</p>
<p>因为现在基本只用coffee编码，为了偷懒少打几个字，习惯将常用的<code>mocha</code>命令加入到<code>grunt</code> tasks中，安装<code>grunt-shell</code>模块，再添加一个简单的task即可，这里就不提了。</p>
<h4 id="mocha_init_&lt;path&gt;"><code>mocha init &lt;path&gt;</code></h4><p>指定一个目录，初始化一个用于浏览器的测试目录。执行后会在该目录生成<code>index.html</code>,<code>mocha.js</code>,<code>mocha.css</code>和一个空白的<code>test.js</code>，可以直接在<code>test.js</code>在添加测试用例。</p>
<h4 id="命令行">命令行</h4><ul>
<li>-h,—help</li>
<li>-V,—version</li>
<li>-A,—async-only 强制为异步模式，即所有测试必须包含一个<code>done()</code>回调。</li>
<li>-c,—colors</li>
<li>-C,—no-colors</li>
<li>-G,—growl</li>
<li>-O,—reporter-options \<k=v,k2=v2,...\> </k=v,k2=v2,...\></li>
<li>-R,—reporter \<name\></name\></li>
<li>-S,—sort</li>
<li>-b,—bail </li>
<li>-d,—debug</li>
<li>-g,—grep \<pattern\></pattern\></li>
<li>-f,—fgrep \<string\></string\></li>
<li>-gc,—expose-gc</li>
<li>-i,—invert</li>
<li>-r,—require \<name\></name\></li>
<li>-s,—slow \<ms\></ms\></li>
<li>-t,—timeout \<ms\> 设置超时，默认为2000ms，如果是长时间运算需要设置。</ms\></li>
<li>-u,—ui \<name\></name\></li>
<li>-w,—watch 监视文件变化</li>
<li>—check-leaks</li>
<li>—compilers \<ext\>:\<module\>,… 使用指定模块编译文件，经常会用到编译coffee</module\></ext\></li>
<li>—debug-brak</li>
<li>—globals \<names\></names\></li>
<li>—inline-diffs </li>
<li>—interfaces</li>
<li>—no-deprecation</li>
<li>—no-exit</li>
<li>—no-timeouts</li>
<li>—opts \<path\></path\></li>
<li>—prof</li>
<li>—recursive</li>
<li>—reporters</li>
<li>—throw-deprecation</li>
<li>—trace</li>
<li>—trace-deprecation</li>
<li>—watch-extensions \<ext\>,…</ext\></li>
<li>—delay</li>
</ul>
<h3 id="常用">常用</h3><h4 id="-w_监视文件变化">-w 监视文件变化</h4><h4 id="—compilers">—compilers</h4><p>for coffeescript 1.6</p>
<pre><code>mocha --compilers coffee:coffee-script <span class="keyword">test</span>/<span class="keyword">test</span>.coffee
</code></pre><p>for coffeescript 1.7+</p>
<pre><code>mocha --compilers <span class="string">coffee:</span>coffee-script<span class="regexp">/register test/</span>test.coffee
</code></pre><h4 id="-b">-b</h4><p>只显示第一个异常，一般测试用例非常多的时比较有用，不然某个接口变化后全屏报错就会悲剧。</p>
<h4 id="-t">-t</h4><p>指定超时时间，命令行中添加为全局的设置，也可以在测试用例内部调用<code>timeout()</code>方法单独设置。<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'a suite of tests.'</span>,<span class="function">-&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.timeout <span class="number">500</span></span><br><span class="line">    it <span class="string">'should take less than 500ms'</span>,<span class="function"><span class="params">(done)</span>-&gt;</span></span><br><span class="line">        setTimeout done,<span class="number">300</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Interfaces">Interfaces</h3><h4 id="BDD">BDD</h4><p>我一般只用到<code>BDD</code><br><code>BDD</code> interface 提供了 <code>describe()</code>,<code>context()</code>,<code>it()</code>,<code>before()</code>,<code>after()</code>,<code>beforeEach()</code>,<code>afterEach()</code>。<br><code>context()</code>和<code>describe()</code>没区别。</p>
<h4 id="TDD">TDD</h4><p><code>TDD</code> interface 提供了<code>suite()</code>,<code>test()</code>,<code>suiteSetup()</code>,<code>suiteTeardown()</code>,<code>setup()</code>,<code>teardown()</code></p>
<h4 id="Exports">Exports</h4><p>这个没什么好讲的。<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports =</span><br><span class="line">    <span class="attribute">before</span>:<span class="function">-&gt;</span></span><br><span class="line">    <span class="string">'Array'</span>:</span><br><span class="line">        <span class="string">'#indexOf()'</span>:<span class="function">-&gt;</span></span><br><span class="line">            <span class="string">'should return -1 when not present'</span>:<span class="function">-&gt;</span></span><br><span class="line">                [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>).should.equal -<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h4 id="QUnit">QUnit</h4><p>用到的第一个测试框架就是<code>QUnit</code>，用法非常简单，但是现在基本不用了，没有层次会比较乱。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mocha是一个拥有丰富功能的javascript测试框架，可以用于nodejs和浏览器。支持同步/异步测试用例，有多种报告形式。<br>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://yisbug.github.io/tags/nodejs/"/>
    
      <category term="test" scheme="http://yisbug.github.io/tags/test/"/>
    
      <category term="整理归纳" scheme="http://yisbug.github.io/categories/%E6%95%B4%E7%90%86%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[restify用法翻译&整理]]></title>
    <link href="http://yisbug.github.io/2015/03/17/restify/"/>
    <id>http://yisbug.github.io/2015/03/17/restify/</id>
    <published>2015-03-17T13:17:06.000Z</published>
    <updated>2015-03-17T21:30:32.000Z</updated>
    <content type="html"><![CDATA[<p>restify是我经常用到的node server模块，实际应用时经常因为不熟悉细节用法，需要查看官方文档，比较麻烦。</p>
<p>这次把官方文档扒了一遍，整理此文，侧重不太常用或不太熟悉的用法，方便查找。<br><a id="more"></a></p>
<h2 id="restify">restify</h2><h3 id="create">create</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">restify = <span class="built_in">require</span> <span class="string">'restify'</span></span><br><span class="line">server = restify.createServer</span><br><span class="line">    <span class="attribute">certificate</span>:  <span class="comment"># https</span></span><br><span class="line">    <span class="attribute">key</span>: <span class="comment"># https</span></span><br><span class="line">    <span class="attribute">formatters</span>: <span class="comment"># object 自定义res formatters for res.send()</span></span><br><span class="line">    <span class="attribute">log</span>: <span class="comment"># object 非必要，可以传入一个bunyan实例</span></span><br><span class="line">    <span class="attribute">name</span>: <span class="comment"># string ，设置一个response header中server字段，默认为restify</span></span><br><span class="line">    <span class="attribute">spdy</span>: <span class="comment"># object  其他选项 accepted by node-spdy</span></span><br><span class="line">    <span class="attribute">version</span>: <span class="comment"># string 版本</span></span><br><span class="line">    <span class="attribute">handleUpgrades</span>: <span class="comment"># bool  hook the upgrade event from the node http server.默认false</span></span><br><span class="line">    <span class="attribute">httpsServerOptions</span>: <span class="comment"># object.</span></span><br><span class="line">server.listen <span class="number">8080</span>,<span class="function">-&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log <span class="string">'%s listening at %s'</span>,server.name,server.url</span><br></pre></td></tr></table></figure>
<h3 id="server-use(fn)">server.use(fn)</h3><p>传入一个function，该function接收(req,res,next)三个参数</p>
<h3 id="define_routes">define routes</h3><ul>
<li>server.post </li>
<li>server.put</li>
<li>server.get</li>
<li>server.head</li>
<li>server.del</li>
</ul>
<h3 id="define_routes_parameters">define routes parameters</h3><ul>
<li><code>path</code> or <code>{name:&#39;foo&#39;,path:&#39;/foo&#39;}</code> 当提供<code>name</code>后，可以由<code>next</code>跳转</li>
<li><code>function(req,res,next)</code></li>
<li><code>function(req,res,next)</code> 可选。支持多个处理过程</li>
</ul>
<h3 id="Hypermedia">Hypermedia</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server.get &#123;<span class="attribute">name</span>:<span class="string">'city'</span>,<span class="attribute">path</span>:<span class="string">'cities/:slug'</span>&#125;,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另外一个处理过程中可以交给上面的处理过程</span></span><br><span class="line">res.send</span><br><span class="line">    <span class="attribute">country</span>:<span class="string">'Australia'</span></span><br><span class="line">    <span class="attribute">capital</span>:server.router.render(<span class="string">'city'</span>,&#123;<span class="attribute">slug</span>:<span class="string">'canberra'</span>&#125;,&#123;<span class="attribute">details</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"country"</span>:<span class="string">'Australia'</span></span><br><span class="line">    <span class="attribute">capital</span>:<span class="string">'cities/canberral?details=true'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="versioned_routes">versioned routes</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.get &#123;<span class="attribute">path</span>:<span class="string">'/foo'</span>,<span class="attribute">version</span>:<span class="string">'1.1'</span>&#125;,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line">server.get &#123;<span class="attribute">path</span>:<span class="string">'/foo'</span>,<span class="attribute">version</span>:<span class="string">'1.2'</span>&#125;,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line">server.get &#123;<span class="attribute">path</span>:<span class="string">'/foo'</span>,<span class="attribute">version</span>:[<span class="string">'1.1'</span>,<span class="string">'1.2'</span>]&#125;,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br></pre></td></tr></table></figure>
<p>请求时可在http头添加<code>accept-version</code>字段。</p>
<h3 id="upgrade_requests">upgrade requests</h3><ul>
<li>http requests contain <code>Connection: Upgrade</code></li>
<li>enable <code>handleUpgrade</code> when creating the server</li>
</ul>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ws = <span class="keyword">new</span> Watershed()</span><br><span class="line">server.get <span class="string">'/websocket/attach'</span>,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res.claimUpgrade</span><br><span class="line">        <span class="keyword">return</span> next <span class="keyword">new</span> Error <span class="string">'Connction Must Upgrade For WebSockets.'</span></span><br><span class="line">    upgrade = res.claimUpgrade()</span><br><span class="line">    shed = ws.accept req,upgrade.socket,upgrade.head</span><br><span class="line">    shed.<span class="literal">on</span> <span class="string">'text'</span>,<span class="function"><span class="params">(msg)</span>-&gt;</span></span><br><span class="line">        <span class="built_in">console</span>.log <span class="string">'Recevied message from websocket client:'</span>+msg</span><br><span class="line">    shed.send <span class="string">'hello world.'</span></span><br><span class="line">    next <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="content_negotiation">content negotiation</h3><p>默认情况下<code>res.send()</code>会自动选择<code>content-type</code>返回，也可以自定义<code>parser</code>。<br><code>restify</code>自身有以下几种三种<code>formatters</code>对应的<code>content-types</code></p>
<ul>
<li><code>application/json</code></li>
<li><code>text/plain</code></li>
<li><code>application/octet-stream</code></li>
</ul>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server = restify.createServer</span><br><span class="line">    <span class="attribute">formatters</span>:</span><br><span class="line">        <span class="string">'application/foo'</span>:<span class="function"><span class="params">(req,res,body)</span>-&gt;</span></span><br><span class="line">            <span class="keyword">if</span> body <span class="keyword">instanceof</span> Error</span><br><span class="line">                <span class="keyword">return</span> body.stack</span><br><span class="line">            <span class="keyword">if</span> Buffer.isBuffer body</span><br><span class="line">                <span class="keyword">return</span> body.toString <span class="string">'base64'</span></span><br><span class="line">            <span class="keyword">return</span> util.inspect body</span><br></pre></td></tr></table></figure>
<p>then:</p>
<figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader <span class="string">'content-type'</span>,<span class="string">'application/foo'</span></span><br><span class="line">res.send <span class="attribute">hello</span>:<span class="string">'world'</span></span><br></pre></td></tr></table></figure>
<p>如果覆盖默认的几种<code>formatters</code>，会改变<code>priority</code>优先级，可以设置一个<code>q-value</code>，例如：<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">restify.createServer</span><br><span class="line">    <span class="attribute">formatters</span>:</span><br><span class="line">        <span class="string">'application/foo;q=0.9'</span>,<span class="function"><span class="params">(req,res,body)</span>-&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="错误处理">错误处理</h3><p>examples:<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">next err <span class="comment"># 返回500</span></span><br><span class="line">res.send <span class="number">4</span>xx,<span class="keyword">new</span> Error(<span class="string">'xxx'</span>) <span class="comment"># 返回指定http状态码</span></span><br><span class="line">res.send &#123;&#125; <span class="comment"># 返回200</span></span><br><span class="line">next.ifError err <span class="comment"># restify 2.1 supports</span></span><br></pre></td></tr></table></figure></p>
<p>handle an error condition:<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="literal">on</span> <span class="string">'InternalServerError'</span>,<span class="function"><span class="params">(req,res,err,cb)</span>-&gt;</span></span><br><span class="line">    err._customContent = <span class="string">'something...'</span></span><br><span class="line">    <span class="keyword">return</span> cb()</span><br></pre></td></tr></table></figure></p>
<h3 id="常见错误列表">常见错误列表</h3><ul>
<li>BadRequestError (400 bad request)</li>
<li>UnauthorizedError (401 Unauthorized)</li>
<li>PaymentRequiredError (402 Payment Required)</li>
<li>ForbiddenError (403 Forbidden)</li>
<li>NotFoundError (404 Not Found)</li>
<li>MethodNotAllowedError (405 Method Not Allowed)</li>
<li>NotAcceptableError (406 Not Acceptable)</li>
<li>ProxyAuthenticationRequiredError (407 Proxy Authentication Required)</li>
<li>RequestTimeoutError (408 Request Time-out)</li>
<li>ConflictError (409 Conflict)</li>
<li>GoneError (410 Gone)</li>
<li>LengthRequiredError (411 Length Required)</li>
<li>PreconditionFailedError (412 Precondition Failed)</li>
<li>RequestEntityTooLargeError (413 Request Entity Too Large)</li>
<li>RequesturiTooLargeError (414 Request-URI Too Large)</li>
<li>UnsupportedMediaTypeError (415 Unsupported Media Type)</li>
<li>RequestedRangeNotSatisfiableError (416 Requested Range Not Satisfiable)</li>
<li>ExpectationFailedError (417 Expectation Failed)</li>
<li>ImATeapotError (418 I’m a teapot)</li>
<li>UnprocessableEntityError (422 Unprocessable Entity)</li>
<li>LockedError (423 Locked)</li>
<li>FailedDependencyError (424 Failed Dependency)</li>
<li>UnorderedCollectionError (425 Unordered Collection)</li>
<li>UpgradeRequiredError (426 Upgrade Required)</li>
<li>PreconditionRequiredError (428 Precondition Required)</li>
<li>TooManyRequestsError (429 Too Many Requests)</li>
<li>RequestHeaderFieldsTooLargeError (431 Request Header Fields Too Large)</li>
<li>InternalServerError (500 Internal Server Error)</li>
<li>NotImplementedError (501 Not Implemented)</li>
<li>BadGatewayError (502 Bad Gateway)</li>
<li>ServiceUnavailableError (503 Service Unavailable)</li>
<li>GatewayTimeoutError (504 Gateway Time-out)</li>
<li>HttpVersionNotSupportedError (505 HTTP Version Not Supported)</li>
<li>VariantAlsoNegotiatesError (506 Variant Also Negotiates)</li>
<li>InsufficientStorageError (507 Insufficient Storage)</li>
<li>BandwidthLimitExceededError (509 Bandwidth Limit Exceeded)</li>
<li>NotExtendedError (510 Not Extended)</li>
<li>NetworkAuthenticationRequiredError (511 Network Authentication Required)</li>
<li>BadDigestError (400 Bad Request)</li>
<li>BadMethodError (405 Method Not Allowed)</li>
<li>InternalError (500 Internal Server Error)</li>
<li>InvalidArgumentError (409 Conflict)</li>
<li>InvalidContentError (400 Bad Request)</li>
<li>InvalidCredentialsError (401 Unauthorized)</li>
<li>InvalidHeaderError (400 Bad Request)</li>
<li>InvalidVersionError (400 Bad Request)</li>
<li>MissingParameterError (409 Conflict)</li>
<li>NotAuthorizedError (403 Forbidden)</li>
<li>RequestExpiredError (400 Bad Request)</li>
<li>RequestThrottledError (429 Too Many Requests)</li>
<li>ResourceNotFoundError (404 Not Found)</li>
<li>WrongAcceptError (406 Not Acceptable)</li>
</ul>
<h3 id="自定义错误">自定义错误</h3><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">util = <span class="built_in">require</span> <span class="string">'util'</span></span><br><span class="line"><span class="function"><span class="title">MyError</span> = <span class="params">(message)</span>-&gt;</span></span><br><span class="line">    restify.RestError.call <span class="keyword">this</span>,&#123;</span><br><span class="line">        <span class="attribute">restCode</span>:<span class="string">'MyError'</span></span><br><span class="line">        <span class="attribute">statusCode</span>:<span class="number">418</span></span><br><span class="line">        <span class="attribute">message</span>:message</span><br><span class="line">        <span class="attribute">contructorOpt</span>: MyError</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span></span><br><span class="line">util.inherits MyError,restify.RestError</span><br></pre></td></tr></table></figure>
<h3 id="events">events</h3><ul>
<li><code>NotFound</code> (req,res,cb) url dones not exist.</li>
<li><code>MethodNotAllowed</code> (req,res,cb) url exist,but no route.</li>
<li><code>VersionNotAllowed</code> (req,res,cb) route exist,but does not match the version.</li>
<li><code>UnsupportedMediaType</code> (req,res,cb) route exist, but does not match content-type</li>
<li><code>after</code> (req,res,route,error) after a route handler.when 404/405/Badversion,still be fired,but route will be <code>null</code>.</li>
<li><code>uncaughtException</code> when some handler throws an uncaughtException.</li>
</ul>
<h3 id="server其他属性">server其他属性</h3><ul>
<li><code>name</code> 名称</li>
<li><code>version</code> default version to user in all routes.</li>
<li><code>log</code> Object bunyan instance</li>
<li><code>acceptable</code> Array(String) list of content-types then server can respond with</li>
<li><code>url</code> String Once listen() is called,this will be filled in tieh where the server is running.</li>
</ul>
<h3 id="server其他方法">server其他方法</h3><h4 id="address()"><code>address()</code></h4><p>wraps node’s address(),returns the bound address.</p>
<p>e.g.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; "<span class="attribute">port</span>": <span class="value"><span class="number">12346</span></span>, "<span class="attribute">family</span>": <span class="value"><span class="string">"IPv4"</span></span>, "<span class="attribute">address</span>": <span class="value"><span class="string">"127.0.0.1"</span> </span>&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="listen(port,[host],[callback])_or_listen(path,[callback])"><code>listen(port,[host],[callback])</code> or <code>listen(path,[callback])</code></h4><p>wraps node’s listen()</p>
<p>(path,[callback]) start a local socket server listening for connections on the given path.</p>
<h4 id="close()"><code>close()</code></h4><p>wraps node’s close()</p>
<h4 id="pre()"><code>pre()</code></h4><p>allows you to add in handlers then run before routing occurs.<br>e.g.<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.pre (req,res,next)-&gt;</span><br><span class="line">    res.headers.accept = <span class="string">'application/jsn'</span></span><br><span class="line">    next()</span><br></pre></td></tr></table></figure></p>
<h4 id="use()"><code>use()</code></h4><p>allows you to add in handlers then run no matter what the route.</p>
<h3 id="Bundled_Plugins">Bundled Plugins</h3><p>内置的多个中间件</p>
<h4 id="Accept_header_parsing">Accept header parsing</h4><p>parses out then <code>Accept</code> header.</p>
<h4 id="authorization_header_parsing">authorization header parsing</h4><p>parses out then <code>Authorization</code> header</p>
<h4 id="cors_handling_plugin">cors handling plugin</h4><p>supports tacking <code>CORS</code> headers into <code>actual</code> requests.<br>当添加其他头部信息时<br>e.g:<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.use restify.CORS</span><br><span class="line">    <span class="attribute">origins</span>:[<span class="string">'http://a.com'</span>,<span class="string">'http://b.com'</span>.<span class="string">'http://c.com:8081'</span>] <span class="comment"># defaults to ['*']</span></span><br><span class="line">    <span class="attribute">credentials</span>:<span class="literal">true</span> <span class="comment"># defaults to false</span></span><br><span class="line">    <span class="attribute">headers</span>:[<span class="string">'x-foo'</span>] <span class="comment"># sets expose-headers</span></span><br></pre></td></tr></table></figure></p>
<h4 id="date_header_parsing">date header parsing</h4><p>parses out then HTTP Date header(if present) and checks for clock skew(default allowed clock skew is 300s,lite Kerberos).It can pass in a number,whick is interpreted in seconds,to allow for clock skew.<br><code>server.use restify.dateParser(60)</code>  60s</p>
<h4 id="jsonp_support">jsonp support</h4><p>you should set the <code>queryParser</code> plugin to run before this.</p>
<h4 id="gzip_response">gzip response</h4><h4 id="query_string_parsing">query string parsing</h4><p>parses the HTTP query string (i.e.,<code>/foo?id=bar&amp;name=mark</code>)<br>if use this,the parsed content will in <code>req.query</code> , and params are merged into <code>req.params</code>.you can disable by passing in <code>mapParams:false</code> in the options object:<br><code>server.use restify.queryParser({mapParams:false)})</code></p>
<h4 id="body_parsing_(JSON/URL-encoded/multipart_form)">body parsing (JSON/URL-encoded/multipart form)</h4><p>Blocks your chain on reading and parsing the HTTP request body.Switchs on <code>Content-Type</code> and does then appropriate logic.<code>application/json</code>,<code>application/x-www-form-urlencoded</code> and <code>multipart/form-data</code> are currently supported.<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server.use restify.bodyParser</span><br><span class="line">    <span class="attribute">maxBodySize</span>:<span class="number">0</span> <span class="comment"># then maximum size in bytes allowed in the HTTP body.</span></span><br><span class="line">    <span class="attribute">mapParams</span>:<span class="literal">true</span> <span class="comment"># if req.params shoud be filled with parsed parameters form HTTP body</span></span><br><span class="line">    <span class="attribute">mapFiles</span>:<span class="literal">false</span> <span class="comment">#  if req.params should be filled with the contents of files sent through a multipart request.</span></span><br><span class="line">    <span class="attribute">overrideParams</span>:<span class="literal">false</span></span><br><span class="line">    <span class="attribute">multipartHandler</span>:<span class="function"><span class="params">(part)</span>-&gt;</span></span><br><span class="line">        part.<span class="literal">on</span> <span class="string">'data'</span>,<span class="function"><span class="params">(data)</span>-&gt;</span></span><br><span class="line">            <span class="comment"># do something with the multipart data</span></span><br><span class="line">    <span class="attribute">multipartFileHandler</span>:<span class="function"><span class="params">(part)</span>-&gt;</span></span><br><span class="line">        part.<span class="literal">on</span> <span class="string">'data'</span>,<span class="function"><span class="params">(data)</span>-&gt;</span></span><br><span class="line">            <span class="comment"># do something with the multipart file data</span></span><br><span class="line">    <span class="attribute">keepExtensions</span>:<span class="literal">false</span></span><br><span class="line">    <span class="attribute">uploadDir</span>: os.tmpdir()</span><br><span class="line">    <span class="attribute">multiples</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="static_file_serving">static file serving</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.get <span class="string">'/'</span>,restify.serveStatic</span><br><span class="line">    <span class="attribute">directory</span>:<span class="string">'./public'</span></span><br><span class="line">    <span class="attribute">default</span>:<span class="string">'index.html'</span></span><br></pre></td></tr></table></figure>
<h4 id="throttling_流量限制">throttling 流量限制</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.use restify.throttle</span><br><span class="line">    <span class="attribute">burst</span>:<span class="number">100</span></span><br><span class="line">    <span class="attribute">rate</span>:<span class="number">50</span></span><br><span class="line">    <span class="attribute">ip</span>:<span class="literal">true</span></span><br><span class="line">    <span class="attribute">overrides</span>:</span><br><span class="line">        <span class="string">'192.168.1.1'</span>:</span><br><span class="line">            <span class="attribute">rate</span>:<span class="number">0</span> <span class="comment"># unlimited.</span></span><br><span class="line">            <span class="attribute">burset</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="conditional_request_handling">conditional request handling</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.use (req,res,next)-&gt;</span><br><span class="line">    res.header <span class="string">'ETag'</span>,<span class="string">'myETag'</span></span><br><span class="line">    res.header <span class="string">'Last-Modified'</span>,<span class="keyword">new</span> Date()</span><br><span class="line">server.use restify.conditionalRequest()</span><br><span class="line">server.get <span class="string">'/hello/:name'</span>,<span class="function"><span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line">    res.send <span class="string">'hello'</span>+req.params.name</span><br></pre></td></tr></table></figure>
<h4 id="audit_logger">audit logger</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="literal">on</span> <span class="string">'after'</span>,restify.auditLogger</span><br><span class="line">    <span class="attribute">log</span>:bunyan.createLogger</span><br><span class="line">        <span class="attribute">name</span>:<span class="string">'audit'</span></span><br><span class="line">        <span class="attribute">stream</span>:process.stdout</span><br></pre></td></tr></table></figure>
<h3 id="request_API">request API</h3><h4 id="header(key,[defaultValue])">header(key,[defaultValue])</h4><p><code>req.header &#39;Accept&#39;,&#39;*/*&#39;</code></p>
<h4 id="accepts(type)">accepts(type)</h4><p><code>req.accepts &#39;html</code> html,text/html,text/plain,application/json</p>
<h4 id="is(type)">is(type)</h4><p><code>req.is &#39;html&#39;</code>,<code>req.is &#39;json</code></p>
<h4 id="isSceure()_是否加密">isSceure() 是否加密</h4><h4 id="isChunked()_是否分块">isChunked() 是否分块</h4><h4 id="isKeepAlive()_是否kept_alive">isKeepAlive() 是否kept alive</h4><h4 id="log">log</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myHandler</span> = <span class="params">(req,res,next)</span>-&gt;</span></span><br><span class="line">    log = req.log</span><br><span class="line">    log.debug &#123;<span class="attribute">params</span>:req.params&#125;,<span class="string">'Hello there %s'</span>,<span class="string">'foo'</span></span><br></pre></td></tr></table></figure>
<h4 id="getLogger(component)">getLogger(component)</h4><p>shorthand to grab a new bunyan instance then is a child component of the one restify has:<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log = req.getLogger <span class="string">'MyFoo'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="time()">time()</h4><p>请求到达的时候，单位ms</p>
<h4 id="startHandlerTimer(handlerName)_开始一个计时器">startHandlerTimer(handlerName) 开始一个计时器</h4><h4 id="endHandlerTimer(handlerName)_结束一个计时器">endHandlerTimer(handlerName) 结束一个计时器</h4><h4 id="Properties">Properties</h4><ul>
<li><code>contentLength</code> Number </li>
<li><code>contentType</code> String</li>
<li><code>href</code> String url.parse(req.url) href</li>
<li><code>log</code> Object bunyan logger you can piggyback on</li>
<li><code>id</code> string A unique request id (x-request-id)</li>
<li><code>path</code> String cleaned up URL path</li>
</ul>
<h3 id="response_API">response API</h3><h4 id="header(key,value)">header(key,value)</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.header <span class="string">'Content-Length'</span>,<span class="number">123</span></span><br><span class="line">res.header <span class="string">'foo'</span>,<span class="keyword">new</span> Date()</span><br></pre></td></tr></table></figure>
<h4 id="charSet(type)">charSet(type)</h4><p>Appends the provided character set to the response’s <code>Content-Type</code><br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.charSet <span class="string">'utf-8'</span></span><br></pre></td></tr></table></figure></p>
<p>Will change the normal json <code>Content-Type</code> to <code>application/json;charset=utf-8</code></p>
<h4 id="cache([type],[options])">cache([type],[options])</h4><p>Sets then cache-control header.<code>type</code> defaults to <code>_public_</code>,and options curretly only taks <code>maxAge</code>.</p>
<h4 id="status(code)">status(code)</h4><p>Sets then response statusCode.e.g.<code>res.cache()</code></p>
<h4 id="send([status],body)">send([status],body)</h4><p>You can use <code>send()</code>  to wrap up all the usual <code>writeHead()</code>,<code>write()</code>,<code>end()</code> calls on the HTTP API of node.<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.send <span class="attribute">hello</span>:<span class="string">'world'</span></span><br><span class="line">res.send <span class="number">201</span>,&#123;<span class="attribute">hello</span>:<span class="string">'world'</span>&#125;</span><br><span class="line">res.send <span class="keyword">new</span> BadRequestError <span class="string">'meh'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="json([status],body)">json([status],body)</h4><p>等同于以下代码:<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.contentType = <span class="string">'json'</span></span><br><span class="line">res.send &#123;<span class="attribute">hello</span>:<span class="string">'world'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="properties">properties</h4><ul>
<li><code>code</code> Number HTTP status code</li>
<li><code>contentLength</code> Number short hand for the header content-length</li>
<li><code>contentType</code> String short hand for the header content-type</li>
<li><code>headers</code> Object response headers</li>
<li><code>id</code>  String A unique request id (x-request-id)</li>
</ul>
<h4 id="设置默认headers">设置默认headers</h4><p>You can change what headers restify sends by default by setting the top-level property <code>defaultResponseHeaders</code>.This should be a function that taks one argument <code>data</code>,whick is the already serialized response body.<code>data</code> can be either a String or Buffer (or null). The <code>this</code> object will be the response itself.<br><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">restify = <span class="built_in">require</span> <span class="string">'restify'</span></span><br><span class="line">restify.defaultResponseHeaders = <span class="function"><span class="params">(data)</span>-&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.header <span class="string">'Server'</span>,<span class="string">'hello world.'</span></span><br><span class="line">restify.defaultResponseHeaders = <span class="literal">false</span> <span class="comment"># disable altogether.</span></span><br></pre></td></tr></table></figure></p>
<h3 id="DTrace">DTrace</h3><p>Dynamic Tracing 动态跟踪<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ dtrace <span class="operator">-l</span> -P restify*</span><br><span class="line">ID   PROVIDER            MODULE                          FUNCTION NAME</span><br><span class="line"><span class="number">24</span> restify38789       mod-<span class="number">88</span>f3f88                       route-start route-start</span><br><span class="line"><span class="number">25</span> restify38789       mod-<span class="number">88</span>f3f88                     handler-start handler-start</span><br><span class="line"><span class="number">26</span> restify38789       mod-<span class="number">88</span>f3f88                      handler-done handler-done</span><br><span class="line"><span class="number">27</span> restify38789       mod-<span class="number">88</span>f3f88                        route-done route-done</span><br></pre></td></tr></table></figure></p>
<h3 id="Client_API">Client API</h3><p><code>restify</code>支持3种<code>client</code></p>
<ul>
<li><code>JsonClient</code> sends and expects application/json</li>
<li><code>StringCLient</code> sends url-encoded request and expects text/plain</li>
<li><code>HttpClient</code> thin wrapper over node’s http/https libraries.</li>
</ul>
<h3 id="JsonClient">JsonClient</h3><h4 id="createJsonClient(options)">createJsonClient(options)</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client = restify.createJsonClient</span><br><span class="line">    <span class="attribute">url</span>:<span class="string">'http://a.com'</span></span><br><span class="line">    <span class="attribute">version</span>:<span class="string">'*'</span></span><br></pre></td></tr></table></figure>
<p>options:</p>
<ul>
<li><code>accept</code> String</li>
<li><code>connectTimeout</code> Number Amount of time to wait for a socket.</li>
<li><code>requestTimeout</code> Number Amount of time to wait for the request to finish</li>
<li><code>dtrace</code> Object node-dtrace-provider handle</li>
<li><code>gzip</code> Object will compress data when sent using <code>content-encodeing:gzip</code></li>
<li><code>headers</code> Object HTTP headers to set in all requests.</li>
<li><code>log</code> Object bunyan instance</li>
<li><code>retry</code> Object options to provide to node-retry;’false’ disables retry.defaults to 4 resties.</li>
<li><code>signRequest</code> Function synchronous callback for interpossing headers before request is sent.</li>
<li><code>url</code> String Fully-qualified URL to connect to.</li>
<li><code>userAgent</code> String UA</li>
<li><code>version</code> String semver string to set the accpet-version.</li>
</ul>
<h4 id="get(path,callback)">get(path,callback)</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.get <span class="string">'/foo/bar'</span>,<span class="function"><span class="params">(err,req,res,obj)</span>-&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="head(path,callback)">head(path,callback)</h4><p>类似<code>get</code>方法，但不传入<code>obj</code>参数</p>
<h4 id="post(path,object,callback)">post(path,object,callback)</h4><h4 id="put(path,object,callback)">put(path,object,callback)</h4><h4 id="del(path,callback)">del(path,callback)</h4><h3 id="StringClient">StringClient</h3><h4 id="createStringClient(options)">createStringClient(options)</h4><h4 id="get(path,callback)-1">get(path,callback)</h4><h4 id="head(path,callback)-1">head(path,callback)</h4><h4 id="post(path,object,callback)-1">post(path,object,callback)</h4><h4 id="put(path,object,callback)-1">put(path,object,callback)</h4><h4 id="del(path,callback)-1">del(path,callback)</h4><h3 id="HttpClient">HttpClient</h3><p><code>HttpClient</code> 是restify提供的最底层的client.只是在node’s http/https modules中添加了部分语法糖。</p>
<h4 id="basicAuth(username,password)">basicAuth(username,password)</h4><figure class="highlight coffee"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.basicAuth <span class="string">'mark'</span>,<span class="string">'mysupersecretpassword'</span></span><br></pre></td></tr></table></figure>
<h4 id="Upgrades">Upgrades</h4>]]></content>
    <summary type="html">
    <![CDATA[<p>restify是我经常用到的node server模块，实际应用时经常因为不熟悉细节用法，需要查看官方文档，比较麻烦。</p>
<p>这次把官方文档扒了一遍，整理此文，侧重不太常用或不太熟悉的用法，方便查找。<br>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://yisbug.github.io/tags/nodejs/"/>
    
      <category term="restify" scheme="http://yisbug.github.io/tags/restify/"/>
    
      <category term="整理归纳" scheme="http://yisbug.github.io/categories/%E6%95%B4%E7%90%86%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chrome插件vimium快捷键整理]]></title>
    <link href="http://yisbug.github.io/2015/03/12/vimium/"/>
    <id>http://yisbug.github.io/2015/03/12/vimium/</id>
    <published>2015-03-11T17:12:01.000Z</published>
    <updated>2015-03-17T21:38:10.000Z</updated>
    <content type="html"><![CDATA[<p><code>vimium</code>是chrome下非常好用的快捷键插件，对照官方帮助，翻译和整理了常用的命令及对应快捷键，方便查找和自定义快捷键<br><a id="more"></a></p>
<h3 id="页面导航">页面导航</h3><ul>
<li>scrollDown 向下 j</li>
<li>scrollUp 向上 k</li>
<li>scrollLeft 向左 h</li>
<li>scrollRight 向右 l</li>
<li>scrollToTop 回到顶部 gg</li>
<li>scrollToBottom 回到底部 G</li>
<li>scrollPageDown 向下滚屏 d</li>
<li>scrollPageUp 向上滚屏 u</li>
<li>scrollFullPageUp</li>
<li>scrollFullPageDown</li>
<li>reload 刷新  r</li>
<li>toggleViewSource 查看源代码 gs</li>
<li>copuCurrentUrl 复制当前页面url  yy</li>
<li>LinkHints.activateModeToCopyLinkUrl 显示所有链接供复制 yf</li>
<li>openCopiedUrlInCurrentTab 在当前标签打开一个被复制的url  p</li>
<li>openCopiedUrlInNewTab 在新标签页打开一个被复制的url P</li>
<li>goUp 返回上一级页面，即a.com/test/返回到a.com/ gu</li>
<li>goToRoot 返回到根级页面，即返回到a.com/ gU</li>
<li>focusInput 移动焦点到页面的第一个textbox gi</li>
<li>enterInsertMode 进入插入模式 i</li>
<li>LinkHints.activateMode 打开一个连接 f</li>
<li>LinkHints.activateModeToOpenInNewTab 在新标签页打开一个链接 F</li>
<li>LinkHints.activateModeToOpenInNewForegroundTab 在后面标签页打开一个链接</li>
<li>LinkHints.activateModeWithQueue</li>
<li>LinkHints.activateModeToDownloadLink</li>
<li>LinkHints.activateModeToOpenIncognito</li>
<li>Vomnibar.activate 打开一个url，书签或者历史记录 o</li>
<li>Vomnibar.activateInNewTab 在新标签页打开一个url，从书签或者历史记录</li>
<li>Vomnibar.activateTabSelection 从已打开的标签页搜索 T</li>
<li>Vomnibar.activateBookmarks 打开一个书签 b</li>
<li>Vomnibar.activateBookmarksInNewTab 在新标签页打开一个书签 B</li>
<li>goPrevious [[</li>
<li>goNext ]]</li>
<li>nextFrame   gf</li>
<li>Marks.activateGotoMode </li>
<li>Marks.activateCreateMode 新建一个书签 m</li>
<li>Vomnibar.activateEditUrl 编辑当前url  ge</li>
<li>Vomnibar.activateEditUrlInNewTab 在新窗口编辑当前页面的url gE</li>
<li>closeTabsOnLeft 关闭左侧的标签页</li>
<li>closeTabsOnRight 关闭右侧的标签页</li>
<li>closeOtherTabs 关闭其他标签页</li>
<li>moveTabLeft 左侧当前标签页 &lt;&lt;</li>
<li>moveTabRight 右移当前标签页 &gt;&gt;</li>
<li>moveTabToNewWindow 移动当前标签页到一个新窗口 W</li>
</ul>
<h3 id="查找">查找</h3><ul>
<li>enterFindMode 进入查找模式 /</li>
<li>performFind 查找下一个 n</li>
<li>performBackwardsFind 查找上一个 N</li>
</ul>
<h3 id="历史记录">历史记录</h3><ul>
<li>goBack 返回上一页 H</li>
<li>goForward 下一页 L</li>
</ul>
<h3 id="选项卡">选项卡</h3><ul>
<li>nextTab 下一个标签页 K,gt</li>
<li>previousTab 上一个标签页 J,gT</li>
<li>firstTab 第一个标签页 g0</li>
<li>lastTab 最后一个标签页 g$</li>
<li>createTab 新建一个标签页 t</li>
<li>duplicateTab 在新窗口打开当前页面 yt</li>
<li>removeTab 关闭当前页 x</li>
<li>恢复最后一个关闭的页面 X</li>
<li>togglePinTab</li>
</ul>
<h3 id="帮助">帮助</h3><ul>
<li>showHelp 显示帮助 ?</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>vimium</code>是chrome下非常好用的快捷键插件，对照官方帮助，翻译和整理了常用的命令及对应快捷键，方便查找和自定义快捷键<br>]]>
    
    </summary>
    
      <category term="chrome" scheme="http://yisbug.github.io/tags/chrome/"/>
    
      <category term="vim" scheme="http://yisbug.github.io/tags/vim/"/>
    
      <category term="整理归纳" scheme="http://yisbug.github.io/categories/%E6%95%B4%E7%90%86%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo]]></title>
    <link href="http://yisbug.github.io/2015/01/01/hello/"/>
    <id>http://yisbug.github.io/2015/01/01/hello/</id>
    <published>2015-01-01T12:00:00.000Z</published>
    <updated>2015-03-17T21:38:31.000Z</updated>
    <content type="html"><![CDATA[<p>hexo常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo serve</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span>]]>
    </summary>
    
      <category term="hexo" scheme="http://yisbug.github.io/tags/hexo/"/>
    
      <category term="整理归纳" scheme="http://yisbug.github.io/categories/%E6%95%B4%E7%90%86%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
</feed>